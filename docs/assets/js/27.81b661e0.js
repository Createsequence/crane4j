(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{302:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"方法容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法容器"}},[t._v("#")]),t._v(" 方法容器")]),t._v(" "),s("p",[t._v("方法容器指以实例方法或静态方法作为数据源的容器。它是我们在日常中最经常使用的容器之一。")]),t._v(" "),s("p",[t._v("和其他的容器不同，方法容器通常不直接创建使用，而是通过在目标方法上添加注解的方式，将该方法 “声明” 为一个方法容器，它通常由 DI 容器自动扫描并注册——换而言之，"),s("strong",[t._v("这个功能比较推荐在 Spring 环境中使用")]),t._v("。")]),t._v(" "),s("p",[t._v("crane4j 在设计上参考了 Spring 处理监听器注解 "),s("code",[t._v("@EventListener")]),t._v(" 的责任链机制，它基于注解处理器 "),s("code",[t._v("MethodContainerAnnotationProcessor")]),t._v(" 和方法容器工厂链 "),s("code",[t._v("MethodContainerFactory")]),t._v(" 实现了扫描和适配的功能，你可以通过添加自己的 "),s("code",[t._v("MethodContainerFactory")]),t._v(" 实现从而扩展这部分功能。")]),t._v(" "),s("h2",{attrs:{id:"_1-声明容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-声明容器"}},[t._v("#")]),t._v(" 1.声明容器")]),t._v(" "),s("p",[t._v("你可以直接在类或方法上添加 "),s("code",[t._v("@ContainerMethod")]),t._v(" 注解，在 Spring 环境中，当项目启动后，会在后处理阶段扫描该方法，并将其注册为一个方法容器。")]),t._v(" "),s("p",[s("strong",[t._v("声明在方法上")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ContainerMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    namespace "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onoToOneMethod"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    resultType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" resultKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回的数据源对象类型为 Foo，并且需要按 id 分组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onoToOneMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("声明在类上")])]),t._v(" "),s("p",[t._v("当你在类上声明时，你需要使用 "),s("code",[t._v("bindMethod")]),t._v(" 和 "),s("code",[t._v("bindMethodParamTypes")]),t._v(" 属性显式的进行方法绑定：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父类")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SuperClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onoToOneMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子类")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ContainerMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    namespace "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onoToOneMethod"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    resultType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" resultKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回的数据源对象类型为 Foo，并且需要按 id 分组")]),t._v("\n    bindMethod "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onoToOneMethod"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指定要绑定的方法名称")]),t._v("\n    bindMethodParamTypes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指定要绑定方法的参数类型")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ChildClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SuperClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("此时，你可以在子类中绑定父类方法作为方法容器。")]),t._v(" "),s("p",[t._v("可以作为方法容器的方法需要"),s("strong",[t._v("满足下述条件")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("声明类")]),t._v("：不限制，你可以将注解声明在接口或抽象类上，如果声明在类父类或者父接口上，那么子类/实现类同样会获得此方法；")]),t._v(" "),s("li",[s("strong",[t._v("方法类型")]),t._v("：不限制，方法可以是实例方法（包括接口或抽象类中的抽象方法）或静态方法；")]),t._v(" "),s("li",[s("strong",[t._v("返回值类型")]),t._v("：方法必须有返回值，且返回值类型必须为 "),s("code",[t._v("Collection")]),t._v(" 集合或 "),s("code",[t._v("Map")]),t._v(" 集合（取决于 "),s("code",[t._v("@ContainerMethod#type")]),t._v(" 属性）；")]),t._v(" "),s("li",[s("strong",[t._v("参数类型")]),t._v("：可以是无参方法，若是有参方法，则首个参数必须为 "),s("code",[t._v("Collection")]),t._v(" 类型；")])]),t._v(" "),s("p",[t._v("常见的各种 "),s("code",[t._v("xxxByIds")]),t._v(" 都是非常典型的方法。")]),t._v(" "),s("h2",{attrs:{id:"_2-可选配置项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-可选配置项"}},[t._v("#")]),t._v(" 2.可选配置项")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("@ContainerMethod")]),t._v(" 注解中，提供了一些可选的配置项：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("API")]),t._v(" "),s("th",[t._v("作用")]),t._v(" "),s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("默认值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("namespace")])]),t._v(" "),s("td",[t._v("定义枚举容器的命名空间")]),t._v(" "),s("td",[t._v("任意字符串")]),t._v(" "),s("td",[s("code",[t._v("Method#getName")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("type")])]),t._v(" "),s("td",[t._v("映射类型，表示如何对结果集按 key 分组")]),t._v(" "),s("td",[s("code",[t._v("MappingType")]),t._v(" 枚举")]),t._v(" "),s("td",[s("code",[t._v("MappingType.ONE_TO_ONE")]),t._v("，即结果总是与 key 一对一分组")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("duplicateStrategy")])]),t._v(" "),s("td",[t._v("当 key 出现重复值时的处理策略")]),t._v(" "),s("td",[s("code",[t._v("DuplicateStrategy")]),t._v(" 枚举")]),t._v(" "),s("td",[s("code",[t._v("DuplicateStrategy.ALERT")]),t._v("，出现重复值时直接抛异常")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("resultKey")])]),t._v(" "),s("td",[t._v("分组的 key 值")]),t._v(" "),s("td",[t._v("方法返回的对象列表的 key")]),t._v(" "),s("td",[s("code",[t._v('"id"')])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("resultType")])]),t._v(" "),s("td",[t._v("返回值类型")]),t._v(" "),s("td",[t._v("返回值参数类型（如果是集合，则为其中的元素类型）")]),t._v(" "),s("td",[t._v("无，必填")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("bindMethod")])]),t._v(" "),s("td",[t._v("绑定方法的名称")]),t._v(" "),s("td",[t._v("方法名")]),t._v(" "),s("td",[t._v("当注解声明在类上时必填，声明在方法上时不填")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("bindMethodParamTypes")])]),t._v(" "),s("td",[t._v("绑定方法的参数类型")]),t._v(" "),s("td",[t._v("方法参数类型")]),t._v(" "),s("td",[t._v("无，不填时默认获取首个符合条件的同名方法")])])])]),t._v(" "),s("h2",{attrs:{id:"_3-对结果分组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-对结果分组"}},[t._v("#")]),t._v(" 3.对结果分组")]),t._v(" "),s("p",[t._v("这里需要强调一下 "),s("code",[t._v("@ContainerMethod#type")]),t._v(" 属性，它用于指定如何对结果集按 key 分组，它通常与 "),s("code",[t._v("resultKey")]),t._v(" 与 "),s("code",[t._v("resultType")]),t._v(" 结合使用。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("说明")]),t._v(" "),s("th",[t._v("分组结果")]),t._v(" "),s("th",[t._v("场景")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("ONE_TO_ONE")])]),t._v(" "),s("td",[t._v("按 key 值一对一分组")]),t._v(" "),s("td",[s("code",[t._v("Map<key, value>")])]),t._v(" "),s("td",[t._v("默认")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("MappingType.ONE_TO_MANY")])]),t._v(" "),s("td",[t._v("按 key 值一对多分组")]),t._v(" "),s("td",[s("code",[t._v("Map<key, List<value>>")])]),t._v(" "),s("td",[t._v("一个 key 对应多个值"),s("br"),t._v("比如一个 "),s("code",[t._v("classId")]),t._v(" 对应多个 "),s("code",[t._v("Student")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("MappingType.MAPPED")])]),t._v(" "),s("td",[t._v("返回值已经是分组后的 "),s("code",[t._v("Map")]),t._v(" 集合，无需分组")]),t._v(" "),s("td",[t._v("原始的方法返回值")]),t._v(" "),s("td",[t._v("当返回值已经是 "),s("code",[t._v("Map")]),t._v(" 时")])])])]),t._v(" "),s("h2",{attrs:{id:"_4-结果缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-结果缓存"}},[t._v("#")]),t._v(" 4.结果缓存")]),t._v(" "),s("p",[t._v("在 2.0 及以上版本，你可以在方法上添加 "),s("code",[t._v("@ContainerCache")]),t._v(" 注解，使其具备缓存功能：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ContainerCache")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ContainerMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    namespace "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onoToOneMethod"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    resultType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" resultKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回的数据源对象类型为 Foo，并且需要按 id 分组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onoToOneMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("缓存的失效时间取决于你在 "),s("code",[t._v("CacheManager")]),t._v(" 中设置的时间，目前它是全局的，无法在每个方法上单独设置。")]),t._v(" "),s("p",[t._v("具体内容，可参见后文 “"),s("RouterLink",{attrs:{to:"/basic/advanced/cache.html"}},[t._v("缓存")]),t._v("” 一节。")],1),t._v(" "),s("h2",{attrs:{id:"_5-手动注册"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-手动注册"}},[t._v("#")]),t._v(" 5.手动注册")]),t._v(" "),s("p",[t._v("手动注册一般只在你的目标类未被 Spring 管理，或者干脆项目没有使用 Spring 的时候会使用。")]),t._v(" "),s("p",[t._v("在 Spring 环境中，针对方法容器的扫描和注册是自动完成的。不过你也可以手动完成这个过程：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 Spring 容器中获取处理器和全局配置")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowried")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodContainerAnnotationProcessor")]),t._v(" processor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowried")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Crane4jGlobalConfiguration")]),t._v(" configuration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基于 Foo 的实例方法创建方法容器")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Container")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" containers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" processor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("process")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncontainers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("configuration"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerContainer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("如果你是在非 Spring 环境中，那么你需要先通过以下代码手动构建 "),s("code",[t._v("MethodContainerAnnotationProcessor")]),t._v(" 实例：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构建方法容器处理器")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Crane4jGlobalConfiguration")]),t._v(" configuration "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SimpleCrane4jGlobalConfiguration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodContainerAnnotationProcessor")]),t._v(" processor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurationUtil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createContainerMethodAnnotationProcessor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("configuration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"_6-选项式配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-选项式配置"}},[t._v("#")]),t._v(" 6.选项式配置")]),t._v(" "),s("p",[t._v("在 2.2 及以上版本，你可以使用 "),s("code",[t._v("@AssembleMethod")]),t._v(" 注解进行选项式风格的配置。通过在类或属性上添加 "),s("code",[t._v("@AssembleMethod")]),t._v(" 注解，并指定要绑定的目标类中的指定方法，你可以快速的使用 spring 容器 bean 中的方法、或任意类中的静态方法作为数据源容器。")]),t._v(" "),s("p",[t._v("比如：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequiredArgsConstructor")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Data")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@AssembleMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        targetType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FooService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 填充数据源为 FooService#listByIds 方法")]),t._v("\n        method "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ContainerMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindMethod "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"listByIds"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" resultType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" resultKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        props "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Mapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Item.name -> Item.name")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Mapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Item.type -> Item.type")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("出于降低理解成本的目的，这种配置方式直接复用了 "),s("code",[t._v("@ContainerMethod")]),t._v(" 注解。")]),t._v(" "),s("p",[s("code",[t._v("@AssembleMethod")]),t._v(" 注解提供了一些参数：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("API")]),t._v(" "),s("th",[t._v("作用")]),t._v(" "),s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("默认值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("targetType")])]),t._v(" "),s("td",[t._v("指定调用类的类型")]),t._v(" "),s("td",[t._v("目标类")]),t._v(" "),s("td",[t._v("无，与 "),s("code",[t._v("target")]),t._v(" 二选一必填")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("target")])]),t._v(" "),s("td",[t._v("指定调用类的类型全限定名，或者容器中的 "),s("code",[t._v("beanName")])]),t._v(" "),s("td",[t._v("调用类的全限定名字符串，如果在 Spring 容器中，则可以是 "),s("code",[t._v("beanName")])]),t._v(" "),s("td",[t._v("无，与 "),s("code",[t._v("targetType")]),t._v(" 二选一必填")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("method")])]),t._v(" "),s("td",[t._v("指定绑定方法")]),t._v(" "),s("td",[s("code",[t._v("@ContainerMethod")])]),t._v(" "),s("td",[t._v("无，必填")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);