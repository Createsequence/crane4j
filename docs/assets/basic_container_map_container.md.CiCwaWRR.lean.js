import{_ as a,c as i,a2 as t,o as n}from"./chunks/framework.Dtz5kk4D.js";const c=JSON.parse('{"title":"集合容器","description":"","frontmatter":{},"headers":[],"relativePath":"basic/container/map_container.md","filePath":"basic/container/map_container.md","lastUpdated":1713452660000}'),e={name:"basic/container/map_container.md"};function p(l,s,h,k,r,o){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="集合容器" tabindex="-1">集合容器 <a class="header-anchor" href="#集合容器" aria-label="Permalink to &quot;集合容器&quot;">​</a></h1><p>集合缓存指以 <code>Map</code> 集合作为数据源的容器。它通常用于存放系统启动后加载的配置项或字典项。</p><p>通过 <code>Containers</code> 的 <code>forMap</code> 工厂方法，我们可以快速配置一个数据源容器：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Container&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Containers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, map);</span></span></code></pre></div><p>当输入一个键值作为 key 时，该容器将从 <code>map</code> 中获取对应的值，并将其作为数据源对象返回。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Containers</code> 是一个用于创建容器的静态工厂，你可以通过它去创建所有类型的容器实例</p></div>`,6)]))}const E=a(e,[["render",p]]);export{c as __pageData,E as default};
