(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{296:function(e,r,o){"use strict";o.r(r);var v=o(14),t=Object(v.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"容器注册回调"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#容器注册回调"}},[e._v("#")]),e._v(" 容器注册回调")]),e._v(" "),r("p",[e._v("参照 Spring 的生命周期回调机制，"),r("code",[e._v("crane4j")]),e._v(" 也提供了特殊的回调接口 "),r("code",[e._v("ContainerRegisterAware")]),e._v("，它提供两个方法用于干涉一般容器的注册行为：")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("beforeContainerRegister")]),e._v("：容器注册前回调，通过该方法可以替换掉最终要注册的容器示例；")]),e._v(" "),r("li",[r("code",[e._v("afterContainerRegister")]),e._v("：容器注册后回调，通过该方法可以获取被注册的容器以及执行注册操作的 "),r("code",[e._v("ContainerProvider")]),e._v("；")])]),e._v(" "),r("p",[r("code",[e._v("crane4j")]),e._v(" 默认提供了两个回调实现：")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("DefaultCacheableContainerProcessor")]),e._v("：在用户的容器注册前，将会把要注册的容器对象包装并替换具备缓存功能的增强容器；")]),e._v(" "),r("li",[r("code",[e._v("ContainerRegisterLogger")]),e._v("：在容器注册后，输出注册信息；")])]),e._v(" "),r("p",[e._v("用户也可以自己实现 "),r("code",[e._v("ContainerRegisterAware")]),e._v("，并将其声明在 spring 上下文中以便自动注册，或者获得全局配置类 "),r("code",[e._v("Crane4jGlobalConfiguration")]),e._v(" 后，调用 "),r("code",[e._v("addContainerRegisterAware")]),e._v(" 方法手动注册。")]),e._v(" "),r("div",{staticClass:"custom-block warning"},[r("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("beforeContainerRegister")]),e._v("  方法执行后，若返回 "),r("code",[e._v("null")]),e._v(" 将导致容器的注册行为被取消，但在部分容器提供者中会导致报错，因此一般情况下最好不要让一个 "),r("code",[e._v("ContainerRegisterAware")]),e._v(" 有机会返回 "),r("code",[e._v("null")]),e._v("；")]),e._v(" "),r("li",[e._v("如果用户自定义了 "),r("code",[e._v("ContainerProvider")]),e._v(" 默认是不会被感知到的，就像 spring 的后处理器不会处理 "),r("code",[e._v("FactoryBean")]),e._v(" 生成的 "),r("code",[e._v("bean")]),e._v(" 一样，若有必要，用户需要手动的向 "),r("code",[e._v("ContainerProvider")]),e._v(" 注册回调接口；")])])])])}),[],!1,null,null,null);r.default=t.exports}}]);