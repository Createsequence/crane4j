(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{291:function(e,v,_){"use strict";_.r(v);var o=_(14),n=Object(o.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"操作注解解析器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#操作注解解析器"}},[e._v("#")]),e._v(" 操作注解解析器")]),e._v(" "),v("p",[e._v("在"),v("code",[e._v("crane4j")]),e._v("中，通过各种注解去声明操作配置，比如 "),v("code",[e._v("@Assemble")]),e._v("、"),v("code",[e._v("@Disassemble")]),e._v("、"),v("code",[e._v("@AssembleEnum")]),e._v(" 和 "),v("code",[e._v("@AssembleMp")]),e._v("，我们称这用于声明操作的注解为"),v("strong",[e._v("操作注解")]),e._v("。它们底层实际上依赖于解析器中对应的操作注解处理器 "),v("code",[e._v("OperationAnnotationHandler")]),e._v(" 实现。")]),e._v(" "),v("p",[v("code",[e._v("crane4j")]),e._v(" 在这部分功能基于典型的责任链模式实现，在开始解析配置前，我们注册一系列操作注解处理器 "),v("code",[e._v("OperationAnnotationHandler")]),e._v(" 到 "),v("code",[e._v("BeanOperationParser")]),e._v(" 中，每个解析器都用于解析一组特定的注解。")]),e._v(" "),v("p",[e._v("当我们将一个需要解析的 "),v("code",[e._v("AnnotatedElement")]),e._v(" 传递给"),v("code",[e._v("Parser")]),e._v("时，"),v("code",[e._v("Parser")]),e._v(" 将创建一个 "),v("code",[e._v("BeanOperations")]),e._v(" 配置对象，并驱动它在处理器链上流转。每个解析器根据规则将 "),v("code",[e._v("AnnotatedElement")]),e._v(" 上的特定注解解析为对应的装配或拆卸配置。")]),e._v(" "),v("p",[e._v("下图展示了解析器的工作流程：")]),e._v(" "),v("p",[v("img",{attrs:{src:"http://img.xiajibagao.top/%E6%97%A0%E6%A0%87%E9%A2%98-2023-06-04-1303.png",alt:""}})]),e._v(" "),v("p",[v("code",[e._v("crane4j")]),e._v("目前提供了四个内置的操作注解处理器：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("AssembleAnnotationResolver")]),e._v("：用于解析"),v("code",[e._v("@Assemble")]),e._v("注解，生成装配操作；")]),e._v(" "),v("li",[v("code",[e._v("DisassembleAnnotationResolver")]),e._v("：用于解析"),v("code",[e._v("@Disassemble")]),e._v("注解，生成拆卸操作；")]),e._v(" "),v("li",[v("code",[e._v("AssembleEnumAnnotationResolver")]),e._v("：用于解析"),v("code",[e._v("@AssembleEnum")]),e._v("注解，生成装配操作；")]),e._v(" "),v("li",[v("code",[e._v("AssembleMpAnnotationResolver")]),e._v("：用于解析"),v("code",[e._v("@AssembleMp")]),e._v("注解，生成以 MyBatis-Plus 查询方法作为数据源的装配操作；")])]),e._v(" "),v("p",[e._v("如果用户希望支持处理自定义的操作注解，可以实现 "),v("code",[e._v("OperationAnnotationHandler")]),e._v(" 接口创建自定义解析器。")]),e._v(" "),v("p",[e._v("在Spring环境中，只需将自定义解析器交给Spring管理，它会在项目启动后自动注册到"),v("code",[e._v("Parser")]),e._v("中。如果在非Spring环境中，可以获取"),v("code",[e._v("TypeHierarchyBeanOperationParser")]),e._v(" 并调用 "),v("code",[e._v("addOperationAnnotationHandler")]),e._v(" 方法手动注册自定义解析器。")])])}),[],!1,null,null,null);v.default=n.exports}}]);