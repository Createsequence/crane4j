import{_ as t,c as e,o as s,a4 as a}from"./chunks/framework.CTZgbW0d.js";const E=JSON.parse('{"title":"反射工厂","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/reflection_factory.md","filePath":"advanced/reflection_factory.md","lastUpdated":1709128937000}'),i={name:"advanced/reflection_factory.md"},r=a(`<h1 id="反射工厂" tabindex="-1">反射工厂 <a class="header-anchor" href="#反射工厂" aria-label="Permalink to &quot;反射工厂&quot;">​</a></h1><p>在 <code>crane4j</code> 中，提供了属性操作器 <code>PropertyOperator</code>，它类似于 MyBatis 的反射工厂，用于统一管理框架各处的反射调用操作。</p><p>它被用于支持包括装配操作执行器、拆卸操作执行器、方法数据源容器以及自动填充切面中的各种属性操作功能，是整个框架的基石。</p><p><code>PropertyOperator</code> 默认提供了以下几个实现：</p><table><thead><tr><th>实现</th><th>介绍</th><th>是否默认生效</th></tr></thead><tbody><tr><td><code>ReflectivePropertyOperator</code></td><td>基于原生反射的普通反射属性操作器，最通用、功能最全的操作器</td><td>√</td></tr><tr><td><code>MethodHandlePropertyOperator</code></td><td>基于方法句柄 <code>MethodHandle</code> 的属性操作器。较前者拥有更高的性能，但是不支持包括虚拟字段在内的一些额外功能</td><td>×</td></tr><tr><td><code>AsmReflectivePropertyOperator</code></td><td>基于 <code>ReflectAsm</code> 的字节码反射属性操作器，理论上具备最高的性能，但是不具备包括虚拟字段在内的一些额外功能，且在 JDK9 及以上版本无法使用</td><td>×</td></tr><tr><td><code>CacheablePropertyOperator</code></td><td>装饰器，在原有功能的基础上支持 <code>getter</code> 和 <code>setter</code> 缓存</td><td>√</td></tr><tr><td><code>MapAccessiblePropertyOperator</code></td><td>装饰器，在原有功能的基础上支持读写 <code>Map</code> 集合</td><td>√</td></tr><tr><td><code>ChainAccessiblePropertyOperator</code></td><td>装饰器，在原有功能的基础上支持通过链式操作符读写嵌套对象属性</td><td>√</td></tr></tbody></table><p>如果你想替换默认的 <code>PropertyOperator</code> 实现，可以在 Spring 配置类中重新声明一个 <code>PropertyOperator</code>，并返回自定义的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PropertyOperator </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">customPropertyOperator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomPropertyOperator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>或者，你也可以直接为已有的操作器添加额外的装饰器：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DecoratedPropertyOperator decoratedPropertyOperator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (DecoratedPropertyOperator) configuration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPropertyOperator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PropertyOperator delegate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decoratedPropertyOperator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPropertyOperator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">delegate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomPropertyOperator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(delegate);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">propertyOperatorHolder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPropertyOperator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(delegate);</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>注意，装饰器是 crane4j 一些独特功能的来源，比如对 <code>Map</code> 对象的支持，或者对链式操作符的支持等，不过同时它们也会带来额外的性能消耗。</p><p>如果你更在乎性能，且用不到这些额外的功能，那么可以选择性的放弃一些装饰器。</p></div>`,10),p=[r];function d(o,n,l,h,c,k){return s(),e("div",null,p)}const g=t(i,[["render",d]]);export{E as __pageData,g as default};
